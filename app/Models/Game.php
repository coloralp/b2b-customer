<?php

namespace App\Models;

use App\Enums\KeyStatus;
use App\Enums\MarketplaceName;
use App\Enums\OfferStatus;
use App\Jobs\UpdateStockWithMatchesMarketplacesJob;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Schema;
use Spatie\Activitylog\LogOptions;
use Spatie\Activitylog\Traits\LogsActivity;

class Game extends Model
{
    use HasFactory, SoftDeletes, LogsActivity;

//    protected $connection = 'b2b_live';

    protected $casts = [
        'price_updated_at' => 'datetime'
    ];


    public const GAME_CATEGORY_TYPES = ['Pc' => 1, 'Console' => 2, 'Giftcard/Epin' => 3];

    protected $guarded = [];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        parent::updated(function (Game $game) {
            if ($game->isDirty(['stock'])) {
                $gameName = $game->name;
                $newStock = $game->stock;
                $oldStock = $game->getOriginal('stock');

                $message = "$gameName için $oldStock ---> $newStock güncellemsi yapıldı";
                Log::channel("general_log")->info("$message");
                dispatch(new UpdateStockWithMatchesMarketplacesJob($game->id));
            } else {

            }
            if ($game->isDirty('amount')) {
                $gameName = $game->name;
                $oldPrice = $game->getOriginal('amount');
                $newPrice = $game->amount;

                $userEmail = auth()->user()->email;

                $message = "$gameName için $oldPrice ---> $newPrice güncellemsi yapıldı $userEmail tarafından";
                Log::channel("general_log")->info("$message");
            }


        });
    }

    public function autoMarketplaces(): BelongsToMany
    {
        return $this->belongsToMany(MarketPlace::class, 'auto_marketplaces', 'game_id', 'marketplace_id')
            ->whereIsAuto(1);
    }

    public function stockHistories(): HasMany
    {
        return $this->hasMany(GameStockUpdate::class, 'game_id');
    }

    public function offers()
    {
        return $this->hasMany(Offer::class, 'game_id')
            ->where('status', OfferStatus::ACTIVE->value);
    }

    public function keys(): HasMany
    {
        return $this->hasMany(Key::class, 'game_id', 'id');
    }

    public function activeKeys(): HasMany
    {
        return $this->keys()->where('status', KeyStatus::ACTIVE->value);
    }

    public function kinguinInSockKeys(): HasMany
    {
        return $this->keys()->where('status', KeyStatus::KINGUIN_STOCK->value);
    }

    public function soldKeys(): HasMany
    {
        return $this->keys()->where('status', KeyStatus::SOLD->value);
    }

    public function reserveKeys(): HasMany
    {
        return $this->keys()->where('status', KeyStatus::RESERVED->value);
    }

    public function language(): BelongsTo
    {
        return $this->belongsTo(Language::class, 'language_id', 'id');
    }

    public function category(): BelongsTo
    {
        return $this->belongsTo(Category::class, 'category_id', 'id');
    }

    public function publisher(): BelongsTo
    {
        return $this->belongsTo(User::class, 'publisher_id', 'id');
    }

    public function region(): BelongsTo
    {
        return $this->belongsTo(Region::class, 'region_id', 'id');
    }

    public function matchesMarketPlaces(): BelongsToMany
    {
        return $this
            ->belongsToMany(MarketPlace::class, 'marketplace_match_games', 'game_id', 'marketplace_id', 'id', 'id')
            ->where('marketplace_id', '!=', MarketplaceName::ETAIL->value);
    }


    public function matchActives(): BelongsToMany
    {
        return $this->matchesMarketPlaces()->where('status', 1);
    }

    public function matchPassives(): BelongsToMany
    {
        return $this->matchesMarketPlaces()->where('status', 0);
    }

    public function getActivitylogOptions(): LogOptions
    {
       // return LogOptions::defaults()->logOnly(collect(Schema::getColumns('games'))->pluck('name')->toArray());
        return LogOptions::defaults()->logOnly(['stock','name','amount','status','deleted_at']);
        // Chain fluent methods for configuration options
    }

    public function getLogNameToUse(): string
    {
        return 'Game';
    }

    public function marketplaceOffers(): HasMany
    {
        return $this->hasMany(MarketplaceMatchGame::class, 'game_id', 'id');
    }

    public function marketplacePassiveOffers(): HasMany
    {
        return $this->marketplaceOffers()->where('status', OfferStatus::PASSIVE->value);
    }

    public function marketplaceActiveOffers(): HasMany
    {
        return $this->marketplaceOffers()->where('status', OfferStatus::ACTIVE->value);
    }

    public function scopeGetMainPageSummary(Builder $query, Carbon $start, ?Carbon $end = null): Builder
    {
        return $query
            ->whereHas('soldKeys')
            ->limit(20)
            ->withCount(
                [
                    'soldKeys' => function ($query) use ($start, $end) {

                        $query
                            ->when(!is_null($end), function (Builder $query1) use ($start, $end) {
                                $query1->whereBetween('sell_date', [$start, $end]);

                            },
                                function (Builder $query2) use ($start) {
                                    $query2->whereDate('sell_date', $start);
                                });
                    },
                    'activeKeys'
                ]
            )
            ->having('sold_keys_count', '>=', 1)
            ->orderByDesc('sold_keys_count');
    }

    public function scopeGetAvailAble(Builder $query): Builder
    {
        return $query->where('amount', '>', 0)->where('stock', '>=', 1);
    }
}
